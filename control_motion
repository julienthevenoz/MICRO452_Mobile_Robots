import numpy as np

class MotionControl:
  '''
  Control method: Proportional Control for Differential Drive Robots
  '''
  def __init__(self):
    # important parameter to adjust
    self.Ka = 30
    self.Kb = 40
    # units: mm
    self.wheel_radis = 20
    self.L = 95
    # weights when implementing the local obstacle avoidance
    self.obstSpeedGain = [6, 4, -2, -6, -8]

  def diff_drive(self, v, omega):
    left_speed = (v - self.L * omega / 2) / self.wheel_radis
    print(left_speed)
    right_speed = (v + self.L * omega / 2) / self.wheel_radis
    print(right_speed)
    left_speed = int(left_speed)
    print(left_speed)
    right_speed = int(right_speed)
    print(right_speed)
    speed = np.array([left_speed, right_speed])
    return speed

  def move_to_next(self, current_pos, goal_pos, current_angle, prox_horizontal):
    '''
      caculate the speed based on current position and goal position
      Input: current_pos, goal_pos, current_angle
      Output: desired velocity and angular velocity of our robot
    '''
    delta = np.subtract(goal_pos, current_pos)
    dis = np.sqrt(np.sum(np.square(delta)))
    theta = np.arctan2(delta[1], delta[0])
    angle_error = current_angle - theta
    v = self.Ka * dis
    omega = self.Kb * angle_error
    for i in range(6):
      omega = omega + prox_horizontal[i] * self.obstSpeedGain[i]
    return v, omega
